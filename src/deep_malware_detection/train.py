import argparse
import os

import models
import torch
from torch.nn import RNN, GRU, LSTM
from dataset import make_loaders
from utils import set_seed, train, get_accuracy, print_config, plot_roc_curve


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--device", type=str, default="cpu")
    parser.add_argument("--model", type=str, default="MalConvPlus")
    parser.add_argument("--embed_dim", type=int, default=8)
    parser.add_argument("--max_len", type=int, default=4096)
    parser.add_argument("--out_channels", type=int, default=128)
    parser.add_argument("--window_size", type=int, default=32)
    parser.add_argument("--dropout", type=float, default=0.5)
    parser.add_argument("--seed", type=int, default=42)
    parser.add_argument("--benign_dir", type=str, required=True)
    parser.add_argument("--benign_dir2", type=str, required=True)
    parser.add_argument("--malware_dir", type=str, required=True)
    parser.add_argument("--malware_dir2", type=str, required=True)
    parser.add_argument("--tag", type=str, default="exp1")
    parser.add_argument(
        "--checkpoint_dir", type=str, default="../../assets/checkpoints"
    )
    parser.add_argument("--batch_size", type=int, default=8)
    parser.add_argument("--val_size", type=float, default=0.1)
    parser.add_argument("--test_size", type=float, default=0.1)

    parser.add_argument("--load_chkpt", type=str, default=None)
    parser.add_argument("--module", type=str, default="RNN")
    parser.add_argument("--hidden_size", type=int, default=256)
    parser.add_argument("--num_layers", type=int, default=1)
    parser.add_argument("--bidirectional", action="store_true")
    parser.add_argument("--residual", action="store_true")
    parser.add_argument("--attn_size", type=int, default=16)
    parser.add_argument("--eval", action="store_true")

    parser.add_argument("--up_sample_benign", type=int, default=2)
    args = parser.parse_args()
    return args


def main(args):
    set_seed(args.seed)
    device = torch.device(args.device)
    model_cls = getattr(models, args.model)
    if "MalConv" in args.model:
        model = model_cls(
            args.embed_dim, 
            args.max_len, 
            args.out_channels, 
            args.window_size, 
            dropout=args.dropout
        ).to(device)
    elif args.model == "RCNN":
        model = model_cls(
            args.embed_dim, 
            args.out_channels, 
            args.window_size, 
            globals()[args.module], 
            args.hidden_size, 
            args.num_layers, 
            args.bidirectional,
            args.residual,
            dropout=args.dropout,
        ).to(device)
    elif args.model == "AttentionRCNN":
        model = model_cls(
            args.embed_dim, 
            args.out_channels, 
            args.window_size, 
            globals()[args.module], 
            args.hidden_size, 
            args.num_layers, 
            args.bidirectional,
            args.residual,
            dropout=args.dropout,
            attn_size=args.attn_size,
        ).to(device)
    else:
        raise ValueError("Invalid model name: {}".format(args.model))
    
    train_loader, val_loader, _ = make_loaders(
        args.benign_dir,
        args.benign_dir2,
        args.malware_dir,
        args.malware_dir2,
        args.batch_size,
        args.val_size,
        args.test_size,
        args.up_sample_benign,
    )
    os.makedirs(args.checkpoint_dir, exist_ok=True)

    print_config(args)
    print(model)
    if args.eval:
        print("Before Loading | Accuracy on train set: {:.2f}%".format(get_accuracy(model, train_loader, device)))
        print("Before Loading | Accuracy on validation set: {:.2f}%".format(get_accuracy(model, val_loader, device)))
        plot_roc_curve(model, val_loader, device)
        if args.load_chkpt is not None:
            model.load_state_dict(torch.load(args.load_chkpt))
            print("After Loading | Accuracy on train set: {:.2f}%".format(get_accuracy(model, train_loader, device)))
            print("After Loading | Accuracy on validation set: {:.2f}%".format(get_accuracy(model, val_loader, device)))
            plot_roc_curve(model, val_loader, device)
    else:
        print("Before Loading | Accuracy on validation set: {:.2f}%".format(get_accuracy(model, val_loader, device)))
        train(model, train_loader, val_loader, device, args.checkpoint_dir, args.tag)
        print("After Loading | Accuracy on validation set: {:.2f}%".format(get_accuracy(model, val_loader, device)))
        plot_roc_curve(model, val_loader, device)


if __name__ == "__main__":
    args = get_args()
    main(args)
